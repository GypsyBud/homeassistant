- alias: Play Good Morning
  trigger:
    - platform: state
      entity_id: binary_sensor.pir_living_room_front
      to: 'on'
    - platform: state
      entity_id: binary_sensor.pir_kitchen
      to: 'on'
  condition:
    - condition: time
      after: '06:00'
      before: '12:00'
    - condition: template
      # Only run if more than 6 hours (21,600 sec) since it last ran 
      value_template: '{{(as_timestamp(now()) - as_timestamp(states.automation.play_good_morning.attributes.last_triggered | default(0)) | int > 21600 )}}'
  action:
    - service: tts.google_say
      data_template:
        entity_id: media_player.google_home_minis
        message: |
          Good morning. Today is 
          {{as_timestamp(now()) | timestamp_custom('%A')}}, {% set day = (as_timestamp(now()) | timestamp_custom('%d')) |int-%}
          {{day}}{%- if day >= 4 and day <= 20 or day >= 24 and day <= 30 -%}th
          {%- elif day == 1 or day == 21 or day == 31-%}st
          {%- elif day == 2 or day == 22 -%}nd
          {%- elif day == 3 or day == 23 -%}rd
          {%- endif %} {{as_timestamp(now()) | timestamp_custom('%B')}}
          It's currently {{states.sensor.dark_sky_summary.state}} and {{states.sensor.dark_sky_temperature.state|round}} degrees.
          Today will be {{states.sensor.dark_sky_hourly_summary.state|replace(".", "")}},
          highs: {{states.sensor.dark_sky_daytime_high_temperature.state|round}},
          lows: {{states.sensor.dark_sky_overnight_low_temperature.state|round}}.
          Winds {{states.sensor.pws_wind_dir.state
          |replace("N","North ")
          |replace("S","South ")
          |replace("E","East ")
          |replace("W","West ")
          }} at {{states.sensor.pws_wind_1d_kph.state}} with gusts off {{states.sensor.pws_wind_gust_1d_kph.state}} km/h.
          Chance of rain: {{states.sensor.pws_precip_1d.state | int(0)}}%.
          {% if now().strftime("%a") == 'Tue' or now().strftime("%a") == 'Wed' or now().strftime("%a") == 'Thu' %}Estimated travel time to Waybridge: {{states.sensor.home_to_verint.state}} minutes.{% endif %}
          {% if (as_timestamp(now()) - as_timestamp(states.automation.start_vacuuming.attributes.last_triggered | default(0)) | int <= 36000) %} Remember to empty the vacuum.{% endif %}
          {% if as_timestamp(now()) | timestamp_custom('%Y-%m-%d') == (states.calendar.birthdays__events.attributes.start_time).split(" ")[0] and states.calendar.birthdays__events.attributes.all_day != True %} Your next appointment is: {{states.calendar.birthdays__events.attributes.message}} at {{(states.calendar.birthdays__events.attributes.start_time).split(" ")[1].split(":")[0]}} {%if (states.calendar.birthdays__events.attributes.start_time).split(" ")[1].split(":")[1] != '00'%}{{(states.calendar.birthdays__events.attributes.start_time).split(" ")[1].split(":")[1]}} {%endif%} {%endif%}
          {% if as_timestamp(now()) | timestamp_custom('%Y-%m-%d') == (states.calendar.birthdays__events.attributes.start_time).split(" ")[0] and states.calendar.birthdays__events.attributes.all_day == True %} Today is : {{states.calendar.birthdays__events.attributes.message|replace("/","and")}}{%endif%}
